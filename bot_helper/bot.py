import os
import sys
import logging
import asyncio

from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from collections import defaultdict

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode, ContentType
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold, hitalic


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Config:
    BOT_TOKEN = os.getenv("BOT_HELPER_TOKEN")
    ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
    REQUEST_TIMEOUT = 3600
    MAX_TICKETS_PER_USER = 3

bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher()

class TempDB:
    users: Dict[int, Dict] = {}
    tickets: Dict[int, Dict] = {}
    counters = {'ticket_id': 1, 'user_id': 1}
    statistics = {
        'total_tickets': 0,
        'response_times': [],
        'categories': defaultdict(int),
        'priorities': defaultdict(int)
    }
db = TempDB()

class TicketStatus:
    NEW = "üÜï –ù–æ–≤—ã–π"
    OPEN = "üü° –û—Ç–∫—Ä—ã—Ç"
    IN_PROGRESS = "üîµ –í —Ä–∞–±–æ—Ç–µ"
    CLOSED = "üü¢ –ó–∞–∫—Ä—ã—Ç"
    URGENT = "üî¥ –°—Ä–æ—á–Ω—ã–π"

class UserStates(StatesGroup):
    select_category = State()
    create_ticket = State()
    add_comment = State()

class AdminStates(StatesGroup):
    answer_ticket = State()
    manage_ticket = State()

def main_menu(user_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üì® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_ticket")
    builder.button(text="üìÇ –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã", callback_data="my_tickets")
    if user_id in Config.ADMIN_IDS:
        builder.button(text="üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", callback_data="admin_panel")
    builder.adjust(1)
    return builder.as_markup()

def ticket_priority_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="urgent")
    builder.button(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="medium")
    builder.button(text="üü¢ –ù–∏–∑–∫–∏–π", callback_data="low")
    builder.adjust(3)
    return builder.as_markup()

def ticket_actions(ticket_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket_id}")
    builder.button(text="üìå –°—Ç–∞—Ç—É—Å", callback_data=f"status_{ticket_id}")
    builder.button(text="üö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{ticket_id}")
    builder.adjust(2)
    return builder.as_markup()

def tickets_list_kb(tickets: List[int], page: int = 0, items_per_page: int = 5) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    paginated_tickets = tickets[start_idx:end_idx]
    
    for ticket_id in paginated_tickets:
        ticket = db.tickets[ticket_id]
        builder.button(
            text=f"#{ticket_id} {ticket['status']}",
            callback_data=f"view_ticket_{ticket_id}"
        )
    
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}")
    if end_idx < len(tickets):
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1, 2)
    return builder.as_markup()

@dp.message(CommandStart())
async def start(message: Message):
    user = message.from_user
    if user.id not in db.users:
        db.users[user.id] = {
            'id': user.id,
            'username': user.username,
            'full_name': user.full_name,
            'tickets': [],
            'blocked': False
        }
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(user.id)
    )

@dp.callback_query(F.data == "new_ticket")
async def new_ticket(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id not in db.users:
        db.users[user_id] = {
            'id': user_id,
            'username': callback.from_user.username,
            'full_name': callback.from_user.full_name,
            'tickets': [],
            'blocked': False
        }
    
    user = db.users[user_id]
    
    if len(user['tickets']) >= Config.MAX_TICKETS_PER_USER:
        await callback.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")
        return
    
    await state.set_state(UserStates.select_category)
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=category_keyboard()
    )

def category_keyboard() -> InlineKeyboardMarkup:
    categories = ["üíª –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "üí∞ –û–ø–ª–∞—Ç–∞", "üìã –î—Ä—É–≥–æ–µ"]
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat, callback_data=f"cat_{cat}")
    builder.adjust(2)
    return builder.as_markup()

@dp.callback_query(F.data.startswith("cat_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    await callback.message.edit_text(
        "üö® –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=ticket_priority_kb()
    )
    await state.set_state(UserStates.create_ticket)

@dp.callback_query(F.data.in_({"urgent", "medium", "low"}))
async def set_priority(callback: CallbackQuery, state: FSMContext):
    await state.update_data(priority=callback.data)
    await callback.message.edit_text(
        "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:\n"
        "(–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)"
    )
    await state.set_state(UserStates.create_ticket)

@dp.message(UserStates.create_ticket)
async def create_ticket_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    ticket_id = db.counters['ticket_id']
    
    attachments = []
    if message.content_type != ContentType.TEXT:
        file_id = None
        if message.content_type == ContentType.PHOTO:
            file_id = message.photo[-1].file_id
        elif message.content_type == ContentType.DOCUMENT:
            file_id = message.document.file_id
        elif message.content_type == ContentType.VIDEO:
            file_id = message.video.file_id
        
        attachments.append({
            'type': message.content_type,
            'file_id': file_id,
            'caption': message.caption
        })

    db.tickets[ticket_id] = {
        'id': ticket_id,
        'user_id': message.from_user.id,
        'category': data['category'],
        'priority': data['priority'],
        'status': TicketStatus.NEW,
        'messages': [{
            'text': message.html_text,
            'date': datetime.now(),
            'type': 'user',
            'attachments': attachments
        }],
        'created_at': datetime.now(),
        'closed_at': None
    }
    

    db.statistics['total_tickets'] += 1
    db.statistics['categories'][data['category']] += 1
    db.statistics['priorities'][data['priority']] += 1
    
    db.users[message.from_user.id]['tickets'].append(ticket_id)
    db.counters['ticket_id'] += 1
    
    await message.answer(
        f"‚úÖ –ó–∞–ø—Ä–æ—Å #{ticket_id} —Å–æ–∑–¥–∞–Ω!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
        reply_markup=main_menu(message.from_user.id)
    )
    
    await notify_admins(ticket_id)
    await state.clear()

async def notify_admins(ticket_id: int, update: bool = False):
    ticket = db.tickets[ticket_id]
    user = db.users[ticket['user_id']]
    
    text = (
        f"üìÆ {'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ' if update else '–ù–æ–≤—ã–π'} –∑–∞–ø—Ä–æ—Å #{ticket_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']}\n"
        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket['category']}\n"
        f"üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ticket['priority']}\n"
        f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {ticket['messages'][-1]['text'][:200]}..."
    )
    
    for admin_id in Config.ADMIN_IDS:
        try:
            msg = await bot.send_message(
                admin_id,
                text,
                reply_markup=ticket_actions(ticket_id))
            ticket['admin_message_id'] = msg.message_id
        except Exception as e:
            logger.error(f"Admin {admin_id} notification failed: {e}")

@dp.callback_query(F.data.startswith("reply_"))
async def reply_ticket(callback: CallbackQuery, state: FSMContext):
    ticket_id = int(callback.data.split("_")[1])
    await state.update_data(ticket_id=ticket_id)
    await state.set_state(AdminStates.answer_ticket)
    await callback.message.answer(
        f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ #{ticket_id}:")

@dp.message(AdminStates.answer_ticket)
async def process_admin_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    ticket_id = data['ticket_id']
    ticket = db.tickets[ticket_id]
    
    try:
        await bot.send_message(
            ticket['user_id'],
            f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å #{ticket_id}:\n{message.html_text}",
            reply_markup=main_menu(ticket['user_id'])
        )
        ticket['status'] = TicketStatus.IN_PROGRESS
        ticket['messages'].append({
            'text': message.html_text,
            'date': datetime.now(),
            'type': 'support'
        })
        
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ #{ticket_id}")
        await update_ticket_message(ticket_id)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()

async def update_ticket_message(ticket_id: int):
    ticket = db.tickets[ticket_id]
    text = (
        f"üìå –ó–∞–ø—Ä–æ—Å #{ticket_id}\n"
        f"–°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    for admin_id in Config.ADMIN_IDS:
        try:
            await bot.edit_message_text(
                text,
                chat_id=admin_id,
                message_id=ticket['admin_message_id'],
                reply_markup=ticket_actions(ticket_id)
            )
        except:
            pass

@dp.callback_query(F.data.startswith("close_"))
async def close_ticket(callback: CallbackQuery):
    ticket_id = int(callback.data.split("_")[1])
    ticket = db.tickets[ticket_id]
    ticket['status'] = TicketStatus.CLOSED
    ticket['closed_at'] = datetime.now()
    
    await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç")
    await update_ticket_message(ticket_id)
    await notify_user_about_close(ticket_id)

async def notify_user_about_close(ticket_id: int):
    ticket = db.tickets[ticket_id]
    await bot.send_message(
        ticket['user_id'],
        f"üì≠ –í–∞—à –∑–∞–ø—Ä–æ—Å #{ticket_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
        reply_markup=main_menu(ticket['user_id'])
    )

async def check_overdue_tickets():
    while True:
        await asyncio.sleep(300)
        now = datetime.now()
        for ticket in db.tickets.values():
            if ticket['status'] == TicketStatus.NEW:
                if (now - ticket['created_at']).seconds > Config.REQUEST_TIMEOUT:
                    await notify_admins_about_overdue(ticket['id'])

async def notify_admins_about_overdue(ticket_id: int):
    for admin_id in Config.ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üö® –ó–∞–ø—Ä–æ—Å #{ticket_id} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è! –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ.",
            reply_markup=ticket_actions(ticket_id)
        )

@dp.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    text = (
        "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len([t for t in db.tickets.values() if t['status'] != TicketStatus.CLOSED])}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö: {len([t for t in db.tickets.values() if t['status'] == TicketStatus.NEW])}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
             InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="all_tickets")]
        ])
    )

@dp.callback_query(F.data == "my_tickets")
async def show_user_tickets(callback: CallbackQuery):
    user = db.users.get(callback.from_user.id)
    if not user or not user['tickets']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")
        return
    
    active_tickets = [t for t in user['tickets'] if db.tickets[t]['status'] != TicketStatus.CLOSED]
    closed_tickets = [t for t in user['tickets'] if db.tickets[t]['status'] == TicketStatus.CLOSED]
    
    text = (
        f"üìÇ –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(active_tickets)}\n"
        f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ: {len(closed_tickets)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=tickets_list_kb(user['tickets'])
    )

@dp.callback_query(F.data.startswith("view_ticket_"))
async def view_ticket_details(callback: CallbackQuery):
    ticket_id = int(callback.data.split("_")[-1])
    ticket = db.tickets.get(ticket_id)
    
    if not ticket:
        await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    text = (
        f"üìÑ –ó–∞–ø—Ä–æ—Å #{ticket_id}\n"
        f"–°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket['category']}\n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ticket['priority']}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {ticket['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(ticket['messages'])}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{ticket['messages'][-1]['text'][:300]}..."
    )
    
    markup = InlineKeyboardBuilder()
    if ticket['status'] != TicketStatus.CLOSED:
        markup.button(text="‚úâÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{ticket_id}")
    # markup.button(text="üîô –ù–∞–∑–∞–¥", callback_data="my_tickets")

        markup.button(text="üì® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_ticket")
        markup.button(text="üìÇ –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã", callback_data="my_tickets")
        markup.adjust(1)
        return markup.as_markup()




    await callback.message.edit_text(
        text,
        reply_markup=markup.as_markup()
    )

@dp.callback_query(F.data.startswith("add_comment_"))
async def add_comment_to_ticket(callback: CallbackQuery, state: FSMContext):
    ticket_id = int(callback.data.split("_")[-1])
    await state.update_data(ticket_id=ticket_id)
    await state.set_state(UserStates.add_comment)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@dp.message(UserStates.add_comment)
async def process_user_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    ticket_id = data['ticket_id']
    
    db.tickets[ticket_id]['messages'].append({
        'text': message.html_text,
        'date': datetime.now(),
        'type': 'user'
    })
    
    await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()
    await notify_admins(ticket_id, update=True)

@dp.callback_query(F.data == "stats")
async def show_statistics(callback: CallbackQuery):
    stats = db.statistics
    avg_time = "N/A"
    if stats['response_times']:
        avg_seconds = sum(stats['response_times']) / len(stats['response_times'])
        avg_time = str(timedelta(seconds=int(avg_seconds)))
    
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_tickets']}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time}\n"
        "üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n" + 
        "\n".join([f" - {k}: {v}" for k, v in stats['categories'].items()]) +
        "\n\nüö® –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:\n" +
        "\n".join([f" - {k}: {v}" for k, v in stats['priorities'].items()])
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    )

@dp.callback_query(F.data == "all_tickets")
async def show_all_tickets(callback: CallbackQuery):
    open_tickets = [t for t in db.tickets.values() if t['status'] != TicketStatus.CLOSED]
    
    text = (
        "üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {len(open_tickets)}\n"
        f"‚Ä¢ –°—Ä–æ—á–Ω—ã—Ö: {len([t for t in open_tickets if t['priority'] == 'urgent'])}\n"
        "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=tickets_list_kb(
            [t['id'] for t in sorted(open_tickets, key=lambda x: x['created_at'], reverse=True)],
            items_per_page=8
        )
    )

@dp.errors()
async def error_handler(event: types.ErrorEvent):
    logger.error(f"Error: {event.exception}", exc_info=True)

async def main():
    await bot.delete_webhook()
    asyncio.create_task(check_overdue_tickets())
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("Starting support bot...")
    asyncio.run(main())