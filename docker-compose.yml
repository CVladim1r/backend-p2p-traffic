version: "3.8"

services:
  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 3

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    command: /bin/bash -c "aerich init-db || echo 'Database already initialized'; aerich upgrade"    
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - backend_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9100:9100"
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    command: /bin/bash -c "while ! nc -z postgres 5432; do sleep 1; done; python -m uvicorn back.main:app --host 0.0.0.0 --port 9100 --workers 2 --limit-max-requests 10000"
    environment:
      - TORTOISE_ORM=back.main.TORTOISE_ORM
      - DATABASE_URL=postgres://postgres:q1q1q1q1@db:5432/metrics_db
    networks:
      - backend_network

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    command: python bot/bot.py
    depends_on:
      backend:
        condition: service_started
    environment:
      - BOT_API_KEY=${BOT_TOKEN}
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge
